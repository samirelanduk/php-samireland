20150519

Message Analytics

computing

A new project.

<p>Like many right-minded, well-adjusted people, I have spent the past few months working on some Python scripts for analysing my electronic messages with other people. That, and my dissertation. And now, it is complete. There are graphs!</p>
<div class="image">
<img src="/images/graphs1.png">
I do so love graphs.
</div>
<h2>The Story</h2>
<p>The story begins with a dream. A dream I have had since 2011, that one day I could be <em>free</em> from the <em>oppression</em> of having my conversations with my friends split over different messaging platforms. I longed for the day when instead of having to check my texts, then WhatsApp, then Facebook Chat, to see what someone said, and instead of having to endlessly scroll up and up and up, they would all be in a single, searchable document. If any man has ever had a more noble desire, I have yet to hear of it.</p>
<p>So, I did a bit of reading, and found that my iPhone''s texts could be accessed by backing the phone up to my computer, and accessing the files there. ‘All SMS messages are stored in a database called <span style="font-size:70%;">3d0d7e5fb2ce288813306e4d4636395e047a3d28</span>'' I was told – and so they were. But this file, it turned out, was a sqlite3 database.</p>
<p>Now, this was 2011. I was younger. My programming knowledge was inadequate for such a task. And so, here in 2011, the project ended for a time. I put aside my dream of a better, more platform-independent world, and got on with my life. Years passed. I learned a little more Python in my free time. When my iPhone finally failed and died – I mourned. But I also kept its backup, secure in the knowledge that eventually the day would come when I <em>would</em> start this project, and resurrect the messages stored there. A bit like Jesus on Judgement Day, only with Python.</p>
<p>Fast forward to February 2015. The world of instant messaging had changed somewhat (now Facebook messaging was almost totally dominant) but I was still in the fortunate position that between the three platforms – SMS, WhatsApp, Facebook chat – I had access to surely 95% of all my communications with my friends, stretching back to January 2011. I decided to finally get the project going.</p>
<p>Sqlite3 databases, I soon discovered, could be accessed with a built-in Python library called... sqlite3. Using this library it was trivial to extract the tables I needed containing the thousands of SMS messages, <em>and</em> the contacts table allowing me to link names to messages.</p>
<p>WhatsApp also stores its messages in a sqlite3 database in the iPhone backup. Discovering the name of this file was a bit of a trial in itself – the internet reported that it was called <span style="font-size:70%;">1b6b187a1b60b9ae8b720c79e2c67f472bab09c0</span>, and so it was... in the first iPhone backup. But apparently in newer versions it is called something else (possibly after its acquisition by Facebook) and for a time it looked like I might be unable to access more recent WhatsApp messages. I grew sad. But - justice prevailed. In the end, I had to iterate through each file in the backup and search for sqlite3 files with tables of the correct name. This yielded the correct file - <span style="font-size:70%;">7c7fba66680ef796b916b067077cc246adacf01d</em>.</p>
<p>(If this seems like a trivial and unimportant level of detail, then you are correct. I document it here solely because I could not find a <em>single</em> source on the internet that revealed the new name of the WhatsApp backup, so I leave it here in the hopes that Google might direct future travellers to this page, and to answers).</p>
<p>Facebook chat was another matter. Messages here are not stored on the phone, as SMS and WhatsApp messages are – they are stored on Facebook''s servers. Fortunately, Facebook allows you to <a href="https://www.facebook.com/dyi?x=AdkUgyG_vCbP8i4n">download an ‘archive''</a> of all your personal data, including every message you''ve ever sent, as html files. Accessing the messages was a simple matter of taking messages.htm, parsing it with <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a>, and sorting them into contacts. Rather annoyingly, this still requires internet access however – many of the contacts have their Facebook ID in place of their name, and to <em>get</em> the name it has to access <a href="http://graph.facebook.com/1359142679">graph.facebook.com</a>. But it works.</p>
<p>And so, my dream was in reach. There were minor problems to overcome – allocating SMS messages to contacts when they had no name attached had to be done manually by asking the user for input, and some people on Facebook have the annoying habit of putting apostrophes in their name or spelling them in stupid ways, making it harder to match them up with their SMS equivalents – but they were all overcome.</p>
<p>Here is an example of the end result...</p>
<div class="image">
<img src="/images/messages.png">
Just imagine it without all the MSPaint splodges hiding the contents.
</div>
<p>The output is just html, with the layout an approximation of how they appeared in their original incarnations. Layout is done with tables – yes, I know you''re not meant to do that anymore but, really, I''ll make it more CSS based in the future.</p>
<h2>Analytics</h2>
<p>I enjoy graphs. A lot. So having constructed these enormous, well annotated datasets, I decided it would be criminal not to provide some charts to go with each message log.</p>
<p>After experimenting with the chart-generating library <a href="http://pygal.org/">Pygal</a>, and finding it not quite adequate for what I wanted to do, I eventually settled on the frankly excellent <a href="http://matplotlib.org/">Matplotlib</a> to make the SVG charts. I''m told it uses Matlab style syntax but since I''ve never used Matlab, I''ll have to take the internet''s word for that.</p>
<p>At present, each log begins with a pie chart showing the relative contributions of SMS, WhatsApp and Facebook to the contents of that log. Here, as in all the charts, the crucial measure used is <em>characters</em> sent, not messages sent. I thought this was a much more meaningful measure of the level of communication between two people – not least because of the fact that different people break their messages up into multiple messages by differing amounts.</p>
<div class="image">
<img src="/images/pie.png" width="362" height="278">
</div>
<p>Then the meaty stuff. The next two charts are characters sent per day (a bar chart), and a 30-day moving average of this data (a line chart). All messages are counted - sent and received.</p>
<div class="image">
<img src="/images/days.png" width="723" height="274">
</div>
<p>This is repeated on the month level next – characters sent per month, and a 3-month moving average.</p>
<div class="image">
<img src="/images/months.png" width="735"" height="271">
</div>
<p>There''s something strangely beautiful about watching your interactions with someone rise and fall (preferably the former) over the years though empirical evidence suggests I am rather in a minority there.</p>
<p>And if that isn''t enough - you can even compare two people...</p>
<div class="image">
<img src="/images/comparison.png" width="662" height="349">
</div>
<h2>Mission Accomplished</h2>
<p>This project has been enormously well received. My friends have gushed praise over it...</p>
<div style="margin-left: 40px;">
<p><q>This feels weirdly invasive...</q> - friend #1</p>
<p><q>This is kind of creepy Sam!</q> - friend #2</p>
<p><q>It''s cool... I guess.</q> - friend #3</p>
</div>
<p>...which makes it even more worthwhile I guess. If <em>you</em> are a person I''ve had any sort of digital communication with since January 2011, and you want to see <em>your</em> chat log – send me a message! The message will be logged and graphed though! Hahaha!</p>
<p>(No but seriously it will end up automatically extracted and graphed.)</p>
<p>And if you''re interested in seeing the code – it''s all on <a href="https://github.com/samirelanduk/messages">GitHub</a>.</p>




